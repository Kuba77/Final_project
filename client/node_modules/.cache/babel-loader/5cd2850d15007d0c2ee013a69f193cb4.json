{"ast":null,"code":"var _jsxFileName = \"/home/tirion/Desktop/Final_project/client/src/pages/RegistrationPage/RegistrationPage.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback } from \"react\";\nimport { useFormik } from \"formik\";\nimport { useDispatch } from \"react-redux\";\nimport { setCustomer, removeCustomer } from \"../../store/customer/reducer\";\nimport { setErors, clearErrors } from \"../../store/errors/reducer\";\nimport { logOrRegisterCustomer, registerCustomer } from \"../../api/userApi\";\nimport { GoogleLogin } from \"react-google-login\";\nimport configData from \"../../config/config.json\";\nimport { ValidationSchema } from \"../../components/forms/components/validationSchema\";\nimport RegistrationForm from \"../../components/form/RegistrationForm\";\nimport Header from \"../../components/Header/Header\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst RegistrationPage = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const singUp = useCallback(async value => {\n    try {\n      let newCustomer = await registerCustomer(value);\n\n      if (newCustomer.message) {\n        dispatch(setErors(newCustomer.message));\n      } else {\n        dispatch(setCustomer(newCustomer.data));\n        dispatch(clearErrors());\n      }\n    } catch (err) {\n      dispatch(setErors(err.response));\n    }\n  }, [dispatch]); // const responseSuccessGoogle = useCallback(\n  //     async (response) => {\n  //         try {\n  //             let customer = await logOrRegisterCustomer(response);\n  //             if (customer.message) {\n  //                 dispatch(setErors(customer.message));\n  //             } else {\n  //                 dispatch(setCustomer(customer));\n  //             }\n  //         } catch (error) {\n  //             dispatch(setErors(error.response));\n  //         }\n  //     },\n  //     [dispatch]\n  // );\n  // const responseErrorGoogle = useCallback(\n  //     async (response) => {\n  //         dispatch(setErors(response.message));\n  //     },\n  //     [dispatch]\n  // );\n\n  const initialValues = {\n    firstName: \"\",\n    lastName: \"\",\n    login: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\"\n  };\n  const validationSchema = ValidationSchema;\n\n  const onSubmit = values => {\n    singUp(values);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form__wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Registration form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(RegistrationForm, {\n        initialValues: initialValues,\n        validationSchema: validationSchema,\n        onSubmit: onSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button__wrapper\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(RegistrationPage, \"kZypjcFZnRHnQQtUvxSvv0wldBQ=\", false, function () {\n  return [useDispatch];\n});\n\n_c = RegistrationPage;\nexport default RegistrationPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegistrationPage\");","map":{"version":3,"sources":["/home/tirion/Desktop/Final_project/client/src/pages/RegistrationPage/RegistrationPage.jsx"],"names":["React","useCallback","useFormik","useDispatch","setCustomer","removeCustomer","setErors","clearErrors","logOrRegisterCustomer","registerCustomer","GoogleLogin","configData","ValidationSchema","RegistrationForm","Header","RegistrationPage","dispatch","singUp","value","newCustomer","message","data","err","response","initialValues","firstName","lastName","login","email","password","confirmPassword","validationSchema","onSubmit","values"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AACA,SAASC,SAAT,QAA0B,QAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,8BAA5C;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,4BAAtC;AACA,SAASC,qBAAT,EAAgCC,gBAAhC,QAAwD,mBAAxD;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAASC,gBAAT,QAAiC,oDAAjC;AACA,OAAOC,gBAAP,MAA6B,wCAA7B;AACA,OAAOC,MAAP,MAAmB,gCAAnB;;;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAAA;;AAC3B,QAAMC,QAAQ,GAAGb,WAAW,EAA5B;AAEA,QAAMc,MAAM,GAAGhB,WAAW,CACtB,MAAOiB,KAAP,IAAiB;AACb,QAAI;AACA,UAAIC,WAAW,GAAG,MAAMV,gBAAgB,CAACS,KAAD,CAAxC;;AACA,UAAIC,WAAW,CAACC,OAAhB,EAAyB;AACrBJ,QAAAA,QAAQ,CAACV,QAAQ,CAACa,WAAW,CAACC,OAAb,CAAT,CAAR;AACH,OAFD,MAEO;AACHJ,QAAAA,QAAQ,CAACZ,WAAW,CAACe,WAAW,CAACE,IAAb,CAAZ,CAAR;AACAL,QAAAA,QAAQ,CAACT,WAAW,EAAZ,CAAR;AACH;AACJ,KARD,CAQE,OAAOe,GAAP,EAAY;AACVN,MAAAA,QAAQ,CAACV,QAAQ,CAACgB,GAAG,CAACC,QAAL,CAAT,CAAR;AACH;AACJ,GAbqB,EActB,CAACP,QAAD,CAdsB,CAA1B,CAH2B,CAoB3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMQ,aAAa,GAAG;AAClBC,IAAAA,SAAS,EAAE,EADO;AAElBC,IAAAA,QAAQ,EAAE,EAFQ;AAGlBC,IAAAA,KAAK,EAAE,EAHW;AAIlBC,IAAAA,KAAK,EAAE,EAJW;AAKlBC,IAAAA,QAAQ,EAAE,EALQ;AAMlBC,IAAAA,eAAe,EAAE;AANC,GAAtB;AAQA,QAAMC,gBAAgB,GAAGnB,gBAAzB;;AAGA,QAAMoB,QAAQ,GAAGC,MAAM,IAAI;AACvBhB,IAAAA,MAAM,CAACgB,MAAD,CAAN;AACH,GAFD;;AAIA,sBACI;AAAA,4BACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADJ,eAsEI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,gBAAD;AAAkB,QAAA,aAAa,EAAET,aAAjC;AAAgD,QAAA,gBAAgB,EAAEO,gBAAlE;AAAoF,QAAA,QAAQ,EAAEC;AAA9F;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAK,QAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAtEJ;AAAA,kBADJ;AAgGH,CAzJD;;GAAMjB,gB;UACeZ,W;;;KADfY,gB;AA2JN,eAAeA,gBAAf","sourcesContent":["import React, { useCallback } from \"react\";\nimport { useFormik } from \"formik\";\nimport { useDispatch } from \"react-redux\";\nimport { setCustomer, removeCustomer } from \"../../store/customer/reducer\";\nimport { setErors, clearErrors } from \"../../store/errors/reducer\";\nimport { logOrRegisterCustomer, registerCustomer } from \"../../api/userApi\";\nimport { GoogleLogin } from \"react-google-login\";\nimport configData from \"../../config/config.json\";\nimport { ValidationSchema } from \"../../components/forms/components/validationSchema\";\nimport RegistrationForm from \"../../components/form/RegistrationForm\";\nimport Header from \"../../components/Header/Header\"\n\nconst RegistrationPage = () => {\n    const dispatch = useDispatch();\n\n    const singUp = useCallback(\n        async (value) => {\n            try {\n                let newCustomer = await registerCustomer(value);\n                if (newCustomer.message) {\n                    dispatch(setErors(newCustomer.message));\n                } else {\n                    dispatch(setCustomer(newCustomer.data));\n                    dispatch(clearErrors());\n                }\n            } catch (err) {\n                dispatch(setErors(err.response));\n            }\n        },\n        [dispatch]\n    );\n\n    // const responseSuccessGoogle = useCallback(\n    //     async (response) => {\n    //         try {\n    //             let customer = await logOrRegisterCustomer(response);\n    //             if (customer.message) {\n    //                 dispatch(setErors(customer.message));\n    //             } else {\n    //                 dispatch(setCustomer(customer));\n    //             }\n    //         } catch (error) {\n    //             dispatch(setErors(error.response));\n    //         }\n    //     },\n    //     [dispatch]\n    // );\n    // const responseErrorGoogle = useCallback(\n    //     async (response) => {\n    //         dispatch(setErors(response.message));\n    //     },\n    //     [dispatch]\n    // );\n\n    const initialValues = {\n        firstName: \"\",\n        lastName: \"\",\n        login: \"\",\n        email: \"\",\n        password: \"\",\n        confirmPassword: \"\"\n    }\n    const validationSchema = ValidationSchema;\n\n\n    const onSubmit = values => {\n        singUp(values);\n    }\n\n    return (\n        <>\n            <Header />\n            {/* <h1> REGISTRATION</h1>\n      <div className=\"Form\">\n        <form onSubmit={formik.handleSubmit}>\n          <label htmlFor=\"firstName\">First Name</label>\n          <input\n            id=\"firstName\"\n            name=\"firstName\"\n            type=\"text\"\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            value={formik.values.firstName}\n          />\n          {formik.touched.firstName && formik.errors.firstName ? (\n            <div>{formik.errors.firstName}</div>\n          ) : null}\n\n          <label htmlFor=\"lastName\">Last Name</label>\n          <input\n            id=\"lastName\"\n            name=\"lastName\"\n            type=\"text\"\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            value={formik.values.lastName}\n          />\n          {formik.touched.lastName && formik.errors.lastName ? (\n            <div>{formik.errors.lastName}</div>\n          ) : null}\n          <label htmlFor=\"login\">WHAT to call you?</label>\n          <input\n            id=\"login\"\n            name=\"login\"\n            type=\"text\"\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            value={formik.values.login}\n          />\n          {formik.touched.login && formik.errors.login ? (\n            <div>{formik.errors.login}</div>\n          ) : null}\n\n          <label htmlFor=\"email\">Email Address</label>\n          <input\n            id=\"email\"\n            name=\"email\"\n            type=\"email\"\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            value={formik.values.email}\n          />\n          {formik.touched.email && formik.errors.email ? (\n            <div>{formik.errors.email}</div>\n          ) : null}\n          <label htmlFor=\"password\">Password</label>\n          <input\n            id=\"password\"\n            name=\"password\"\n            type=\"password\"\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            value={formik.values.password}\n          />\n          {formik.touched.password && formik.errors.password ? (\n            <div>{formik.errors.password}</div>\n          ) : null}\n          <button type=\"submit\">Submit</button>\n        </form>\n      </div> */}\n            <div className=\"form__wrapper\">\n                <h1>Registration form</h1>\n                <RegistrationForm initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit} />\n                <div className=\"button__wrapper\">\n                {/* <GoogleLogin\n                    clientId={configData.REACT_APP_GOOGLE_CLIENT_ID}\n                    buttonText=\"Login\"\n                    onSuccess={responseSuccessGoogle}\n                    onFailure={responseErrorGoogle}\n                    cookiePolicy={\"single_host_origin\"}\n                /> */}\n\n                {/* <button\n                    className=\"form__btn\"\n                    type=\"button\"\n                    onClick={() => {\n                        dispatch(removeCustomer());\n                    }}\n                >\n                    LOGOUT\n                </button> */}\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default RegistrationPage;\n"]},"metadata":{},"sourceType":"module"}