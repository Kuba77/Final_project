{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  itemsInCart: []\n};\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    setItemInCart: (state, action) => {\n      state.itemsInCart.push(action.payload);\n    },\n    deleteItemFromCart: (state, action) => {\n      state.itemsInCart = state.itemsInCart.filter(book => book.id !== action.payload);\n    },\n    clearCart: state => {\n      state.itemsInCart = state.itemsInCart = [];\n    }\n  }\n});\nexport const {\n  setItemInCart,\n  deleteItemFromCart,\n  clearCart\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["/home/tirion/Desktop/Final_project/client/src/store/cart/reducer.js"],"names":["createSlice","initialState","itemsInCart","cartSlice","name","reducers","setItemInCart","state","action","push","payload","deleteItemFromCart","filter","book","id","clearCart","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,WAAW,EAAE;AADM,CAArB;AAIA,MAAMC,SAAS,GAAGH,WAAW,CAAC;AAC5BI,EAAAA,IAAI,EAAE,MADsB;AAE5BH,EAAAA,YAF4B;AAG5BI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,aAAa,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAChCD,MAAAA,KAAK,CAACL,WAAN,CAAkBO,IAAlB,CAAuBD,MAAM,CAACE,OAA9B;AACD,KAHO;AAIRC,IAAAA,kBAAkB,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AACrCD,MAAAA,KAAK,CAACL,WAAN,GAAoBK,KAAK,CAACL,WAAN,CAAkBU,MAAlB,CACjBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYN,MAAM,CAACE,OADX,CAApB;AAGD,KARO;AASRK,IAAAA,SAAS,EAAGR,KAAD,IAAW;AACpBA,MAAAA,KAAK,CAACL,WAAN,GAAoBK,KAAK,CAACL,WAAN,GAAoB,EAAxC;AACD;AAXO;AAHkB,CAAD,CAA7B;AAkBA,OAAO,MAAM;AAAEI,EAAAA,aAAF;AAAiBK,EAAAA,kBAAjB;AAAqCI,EAAAA;AAArC,IACXZ,SAAS,CAACa,OADL;AAEP,eAAeb,SAAS,CAACc,OAAzB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  itemsInCart: [],\n};\n\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    setItemInCart: (state, action) => {\n      state.itemsInCart.push(action.payload);\n    },\n    deleteItemFromCart: (state, action) => {\n      state.itemsInCart = state.itemsInCart.filter(\n        (book) => book.id !== action.payload\n      );\n    },\n    clearCart: (state) => {\n      state.itemsInCart = state.itemsInCart = [];\n    },\n  },\n});\n\nexport const { setItemInCart, deleteItemFromCart, clearCart } =\n  cartSlice.actions;\nexport default cartSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}