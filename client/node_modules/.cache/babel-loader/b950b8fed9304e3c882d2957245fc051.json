{"ast":null,"code":"var _jsxFileName = \"/home/tirion/Desktop/Final_project/client/src/pages/RegistrationPage/RegistrationPage.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { setCustomer, removeCustomer } from \"../../store/customer/reducer\";\nimport { setErors, clearErrors, getErrors } from \"../../store/errors/reducer\";\nimport { logOrRegisterCustomer, registerCustomer } from \"../../api/userApi\";\nimport ValidationSchema from \"../../components/form/ValidationSchema\";\nimport RegistrationForm from \"../../components/form/RegistrationForm\";\nimport Header from \"../../components/Header/Header\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst RegistrationPage = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const singUp = useCallback(async value => {\n    try {\n      let newCustomer = await registerCustomer(value);\n\n      if (newCustomer.message) {\n        dispatch(setErors(newCustomer.message));\n      } else {\n        dispatch(setCustomer(newCustomer.data));\n        dispatch(clearErrors());\n      }\n    } catch (err) {\n      // dispatch(console.log(setErors(err.response)));\n      dispatch(console.log(getErrors(err.response)));\n    }\n  }, [dispatch]);\n  const initialValues = {\n    firstName: \"\",\n    lastName: \"\",\n    login: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\"\n  };\n  const validationSchema = ValidationSchema;\n\n  const onSubmit = values => {\n    singUp(values);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(RegistrationForm, {\n      initialValues: initialValues,\n      validationSchema: validationSchema,\n      onSubmit: onSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n\n_s(RegistrationPage, \"kZypjcFZnRHnQQtUvxSvv0wldBQ=\", false, function () {\n  return [useDispatch];\n});\n\n_c = RegistrationPage;\nexport default RegistrationPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegistrationPage\");","map":{"version":3,"sources":["/home/tirion/Desktop/Final_project/client/src/pages/RegistrationPage/RegistrationPage.jsx"],"names":["React","useCallback","useDispatch","setCustomer","removeCustomer","setErors","clearErrors","getErrors","logOrRegisterCustomer","registerCustomer","ValidationSchema","RegistrationForm","Header","RegistrationPage","dispatch","singUp","value","newCustomer","message","data","err","console","log","response","initialValues","firstName","lastName","login","email","password","confirmPassword","validationSchema","onSubmit","values"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,8BAA5C;AACA,SAASC,QAAT,EAAmBC,WAAnB,EAAgCC,SAAhC,QAAiD,4BAAjD;AACA,SAASC,qBAAT,EAAgCC,gBAAhC,QAAwD,mBAAxD;AACA,OAAOC,gBAAP,MAA6B,wCAA7B;AACA,OAAOC,gBAAP,MAA6B,wCAA7B;AACA,OAAOC,MAAP,MAAmB,gCAAnB;;;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAAA;;AAC3B,QAAMC,QAAQ,GAAGZ,WAAW,EAA5B;AAEA,QAAMa,MAAM,GAAGd,WAAW,CACtB,MAAOe,KAAP,IAAiB;AACb,QAAI;AACA,UAAIC,WAAW,GAAG,MAAMR,gBAAgB,CAACO,KAAD,CAAxC;;AACA,UAAIC,WAAW,CAACC,OAAhB,EAAyB;AACrBJ,QAAAA,QAAQ,CAACT,QAAQ,CAACY,WAAW,CAACC,OAAb,CAAT,CAAR;AACH,OAFD,MAEO;AACHJ,QAAAA,QAAQ,CAACX,WAAW,CAACc,WAAW,CAACE,IAAb,CAAZ,CAAR;AACAL,QAAAA,QAAQ,CAACR,WAAW,EAAZ,CAAR;AACH;AACJ,KARD,CAQE,OAAOc,GAAP,EAAY;AACV;AACgBN,MAAAA,QAAQ,CAACO,OAAO,CAACC,GAAR,CAAYf,SAAS,CAACa,GAAG,CAACG,QAAL,CAArB,CAAD,CAAR;AAEnB;AACJ,GAfqB,EAgBtB,CAACT,QAAD,CAhBsB,CAA1B;AAmBA,QAAMU,aAAa,GAAG;AAClBC,IAAAA,SAAS,EAAE,EADO;AAElBC,IAAAA,QAAQ,EAAE,EAFQ;AAGlBC,IAAAA,KAAK,EAAE,EAHW;AAIlBC,IAAAA,KAAK,EAAE,EAJW;AAKlBC,IAAAA,QAAQ,EAAE,EALQ;AAMlBC,IAAAA,eAAe,EAAE;AANC,GAAtB;AAQA,QAAMC,gBAAgB,GAAGrB,gBAAzB;;AAGA,QAAMsB,QAAQ,GAAGC,MAAM,IAAI;AACvBlB,IAAAA,MAAM,CAACkB,MAAD,CAAN;AACH,GAFD;;AAIA,sBACI;AAAA,4BACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEQ,QAAC,gBAAD;AAAkB,MAAA,aAAa,EAAET,aAAjC;AAAgD,MAAA,gBAAgB,EAAEO,gBAAlE;AAAoF,MAAA,QAAQ,EAAEC;AAA9F;AAAA;AAAA;AAAA;AAAA,YAFR;AAAA,kBADJ;AAMH,CA3CD;;GAAMnB,gB;UACeX,W;;;KADfW,gB;AA6CN,eAAeA,gBAAf","sourcesContent":["import React, { useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { setCustomer, removeCustomer } from \"../../store/customer/reducer\";\nimport { setErors, clearErrors, getErrors } from \"../../store/errors/reducer\";\nimport { logOrRegisterCustomer, registerCustomer } from \"../../api/userApi\";\nimport ValidationSchema from \"../../components/form/ValidationSchema\";\nimport RegistrationForm from \"../../components/form/RegistrationForm\";\nimport Header from \"../../components/Header/Header\"\n\nconst RegistrationPage = () => {\n    const dispatch = useDispatch();\n\n    const singUp = useCallback(\n        async (value) => {\n            try {\n                let newCustomer = await registerCustomer(value);\n                if (newCustomer.message) {\n                    dispatch(setErors(newCustomer.message));\n                } else {\n                    dispatch(setCustomer(newCustomer.data));\n                    dispatch(clearErrors());\n                }\n            } catch (err) {\n                // dispatch(console.log(setErors(err.response)));\n                                dispatch(console.log(getErrors(err.response)));\n\n            }\n        },\n        [dispatch]\n    );\n\n    const initialValues = {\n        firstName: \"\",\n        lastName: \"\",\n        login: \"\",\n        email: \"\",\n        password: \"\",\n        confirmPassword: \"\"\n    }\n    const validationSchema = ValidationSchema;\n\n\n    const onSubmit = values => {\n        singUp(values);\n    }\n\n    return (\n        <>\n            <Header />\n                <RegistrationForm initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit} />  \n        </>\n    );\n};\n\nexport default RegistrationPage;\n"]},"metadata":{},"sourceType":"module"}