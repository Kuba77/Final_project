{"ast":null,"code":"var _jsxFileName = \"/home/tirion/Desktop/Final_project/client/src/components/form/RegistrationForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback } from 'react';\nimport { Formik, Form } from 'formik';\nimport FormikControl from './FormikControl';\nimport classes from \"./Form.module.scss\";\nimport { useDispatch } from \"react-redux\";\nimport { setCustomer, removeCustomer } from \"../../store/customer/reducer\";\nimport { setErors } from \"../../store/errors/reducer\";\nimport { logOrRegisterCustomer, registerCustomer } from \"../../api/userApi\";\nimport { GoogleLogin } from \"react-google-login\";\nimport configData from \"../../config/config.json\";\nimport TextError from './components/TextError';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction RegistrationForm(props) {\n  _s();\n\n  const {\n    initialValues,\n    validationSchema,\n    onSubmit,\n    errorMessage\n  } = props;\n  const dispatch = useDispatch();\n  const responseSuccessGoogle = useCallback(async response => {\n    try {\n      let customer = await logOrRegisterCustomer(response);\n\n      if (customer.message) {\n        dispatch(setErors(customer.message));\n      } else {\n        dispatch(setCustomer(customer));\n      }\n    } catch (error) {\n      dispatch(setErors(error.response));\n    }\n  }, [dispatch]);\n  const responseErrorGoogle = useCallback(async response => {\n    dispatch(setErors(response.message));\n  }, [dispatch]);\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: initialValues,\n    validationSchema: validationSchema,\n    onSubmit: onSubmit,\n    children: formik => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.form__wrapper,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Registration form\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(FormikControl, {\n            control: \"input\",\n            type: \"text\",\n            label: \"Please, enter your first name\",\n            name: \"firstName\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormikControl, {\n            control: \"input\",\n            type: \"text\",\n            label: \"Please, enter your last name\",\n            name: \"lastName\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormikControl, {\n            control: \"input\",\n            type: \"text\",\n            label: \"Please, enter your login\",\n            name: \"login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormikControl, {\n            control: \"input\",\n            type: \"email\",\n            label: \"Email\",\n            name: \"email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TextError, {\n            children: errorMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormikControl, {\n            control: \"input\",\n            type: \"password\",\n            label: \"Password\",\n            name: \"password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormikControl, {\n            control: \"input\",\n            type: \"password\",\n            label: \"Confirm Password\",\n            name: \"confirmPassword\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.button__wrapper,\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: classes.form__btn,\n              type: \"submit\",\n              disabled: !formik.isValid,\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(GoogleLogin, {\n              clientId: configData.REACT_APP_GOOGLE_CLIENT_ID,\n              buttonText: \"Register with google\",\n              onSuccess: responseSuccessGoogle,\n              onFailure: responseErrorGoogle,\n              cookiePolicy: \"single_host_origin\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n\n_s(RegistrationForm, \"8ORvkaS1OXtn+j0Fw97zdTc+MaA=\", false, function () {\n  return [useDispatch];\n});\n\n_c = RegistrationForm;\nexport default RegistrationForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegistrationForm\");","map":{"version":3,"sources":["/home/tirion/Desktop/Final_project/client/src/components/form/RegistrationForm.jsx"],"names":["React","useCallback","Formik","Form","FormikControl","classes","useDispatch","setCustomer","removeCustomer","setErors","logOrRegisterCustomer","registerCustomer","GoogleLogin","configData","TextError","RegistrationForm","props","initialValues","validationSchema","onSubmit","errorMessage","dispatch","responseSuccessGoogle","response","customer","message","error","responseErrorGoogle","formik","form__wrapper","button__wrapper","form__btn","isValid","REACT_APP_GOOGLE_CLIENT_ID"],"mappings":"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","sourcesContent":["import React, { useCallback } from 'react'\nimport { Formik, Form} from 'formik'\nimport FormikControl from './FormikControl'\nimport classes from \"./Form.module.scss\"\nimport { useDispatch } from \"react-redux\";\nimport { setCustomer, removeCustomer } from \"../../store/customer/reducer\";\nimport { setErors} from \"../../store/errors/reducer\";\nimport { logOrRegisterCustomer, registerCustomer } from \"../../api/userApi\";\nimport { GoogleLogin } from \"react-google-login\";\nimport configData from \"../../config/config.json\";\nimport TextError from './components/TextError';\n\nfunction RegistrationForm(props) {\n  const { initialValues, validationSchema, onSubmit,  errorMessage} = props;\n\n  const dispatch = useDispatch();\n\n  const responseSuccessGoogle = useCallback(\n    async (response) => {\n      try {\n        let customer = await logOrRegisterCustomer(response);\n        if (customer.message) {\n          dispatch(setErors(customer.message));\n        } else {\n          dispatch(setCustomer(customer));\n        }\n      } catch (error) {\n        dispatch(setErors(error.response));\n      }\n    },\n    [dispatch]\n  );\n  const responseErrorGoogle = useCallback(\n    async (response) => {\n      dispatch(setErors(response.message));\n    },\n    [dispatch]\n  );\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      onSubmit={onSubmit}\n    >\n      {formik => {\n        return (\n          <div className={classes.form__wrapper}>\n          <h1>Registration form</h1>\n          <Form>\n            <FormikControl\n              control='input'\n              type='text'\n              label='Please, enter your first name'\n              name='firstName'\n            />\n            <FormikControl\n              control='input'\n              type='text'\n              label='Please, enter your last name'\n              name='lastName'\n            />\n            <FormikControl\n              control='input'\n              type='text'\n              label='Please, enter your login'\n              name='login'\n            />\n            <FormikControl\n              control='input'\n              type='email'\n              label='Email'\n              name='email'\n            />\n            <TextError>{errorMessage}</TextError>\n            <FormikControl\n              control='input'\n              type='password'\n              label='Password'\n              name='password'\n            />\n            <FormikControl\n              control='input'\n              type='password'\n              label='Confirm Password'\n              name='confirmPassword'\n            />\n            <div className={classes.button__wrapper}>\n              <button className={classes.form__btn} type='submit' disabled={!formik.isValid}>\n                Submit\n              </button>\n              {/* <button\n                className=\"form__btn\"\n                type=\"button\"\n                onClick={() => { dispatch(removeCustomer()); }}\n              >\n                LOGOUT\n              </button> */}\n              <GoogleLogin\n                clientId={configData.REACT_APP_GOOGLE_CLIENT_ID}\n                buttonText=\"Register with google\"\n                onSuccess={responseSuccessGoogle}\n                onFailure={responseErrorGoogle}\n                cookiePolicy={\"single_host_origin\"}\n              />\n            </div>\n          </Form>\n          </div>\n        )\n      }}\n    </Formik>\n  )\n}\n\nexport default RegistrationForm"]},"metadata":{},"sourceType":"module"}