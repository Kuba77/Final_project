{"ast":null,"code":"var _jsxFileName = \"/home/tirion/Desktop/Final_project/client/src/pages/LoginPage/LoginPage.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback } from \"react\";\nimport { Formik, Form, useFormik } from \"formik\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { logOrRegisterCustomer, loginCustomer } from \"../../api/userApi\";\nimport { setErors, clearErrors } from \"../../store/errors/reducer\";\nimport { setCustomer } from \"../../store/customer/reducer\";\nimport { GoogleLogin } from \"react-google-login\";\nimport configData from \"../../config/config.json\";\nimport { ValidationSchema } from \"../../components/forms/components/validationSchema\";\nimport { customerName, errorloginOrEmail } from \"../../store/selectors\";\nimport LoginForm from \"../../components/form/LoginForm\";\nimport Header from \"../../components/Header/Header\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst LoginPage = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const store = useSelector(state => state);\n  const singIn = useCallback(async values => {\n    try {\n      let customer = await loginCustomer(values);\n\n      if (customer.loginOrEmail) {\n        dispatch(setErors(customer));\n      } else {\n        dispatch(setCustomer(customer));\n        dispatch(clearErrors());\n      }\n    } catch (error) {\n      dispatch(setErors(error.response));\n    }\n  }, [dispatch]);\n  const responseSuccessGoogle = useCallback(async response => {\n    try {\n      let customer = await logOrRegisterCustomer(response);\n\n      if (customer.message) {\n        dispatch(setErors(customer.message));\n      } else {\n        dispatch(setCustomer(customer));\n      }\n    } catch (error) {\n      dispatch(setErors(error.response));\n    }\n  }, [dispatch]);\n  const responseErrorGoogle = useCallback(async response => {\n    dispatch(setErors(response.message));\n  }, [dispatch]);\n  const formik = useFormik({\n    initialValues: {\n      loginOrEmail: \"\",\n      password: \"\"\n    },\n    onSubmit: values => {\n      singIn(values);\n    }\n  });\n  const initialValues = {\n    email: '',\n    password: ''\n  };\n  const validationSchema = ValidationSchema;\n\n  const onSubmit = values => {\n    singIn(values);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(LoginForm, {\n        initialValues: initialValues,\n        validationSchema: validationSchema,\n        onSubmit: onSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(GoogleLogin, {\n          clientId: configData.REACT_APP_GOOGLE_CLIENT_ID,\n          buttonText: \"Login\",\n          onSuccess: responseSuccessGoogle,\n          onFailure: responseErrorGoogle,\n          cookiePolicy: \"single_host_origin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\" Welcome back \", customerName(store)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: errorloginOrEmail(store)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(LoginPage, \"k6SdcDqDo8C/eoyqqYtC7lZqTDM=\", false, function () {\n  return [useDispatch, useSelector, useFormik];\n});\n\n_c = LoginPage;\nexport default LoginPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"sources":["/home/tirion/Desktop/Final_project/client/src/pages/LoginPage/LoginPage.jsx"],"names":["React","useCallback","Formik","Form","useFormik","useDispatch","useSelector","logOrRegisterCustomer","loginCustomer","setErors","clearErrors","setCustomer","GoogleLogin","configData","ValidationSchema","customerName","errorloginOrEmail","LoginForm","Header","LoginPage","dispatch","store","state","singIn","values","customer","loginOrEmail","error","response","responseSuccessGoogle","message","responseErrorGoogle","formik","initialValues","password","onSubmit","email","validationSchema","REACT_APP_GOOGLE_CLIENT_ID"],"mappings":"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","sourcesContent":["import React, { useCallback } from \"react\";\nimport { Formik, Form, useFormik } from \"formik\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { logOrRegisterCustomer, loginCustomer } from \"../../api/userApi\";\nimport { setErors, clearErrors } from \"../../store/errors/reducer\";\nimport { setCustomer } from \"../../store/customer/reducer\";\nimport { GoogleLogin } from \"react-google-login\";\nimport configData from \"../../config/config.json\";\nimport { ValidationSchema } from \"../../components/forms/components/validationSchema\";\nimport { customerName, errorloginOrEmail } from \"../../store/selectors\";\nimport LoginForm from \"../../components/form/LoginForm\";\nimport Header from \"../../components/Header/Header\"\n\n\nconst LoginPage = () => {\n  const dispatch = useDispatch();\n  const store = useSelector((state) => state);\n\n  const singIn = useCallback(\n    async (values) => {\n      try {\n        let customer = await loginCustomer(values);\n        if (customer.loginOrEmail) {\n          dispatch(setErors(customer));\n        } else {\n          dispatch(setCustomer(customer));\n          dispatch(clearErrors());\n        }\n      } catch (error) {\n        dispatch(setErors(error.response));\n      }\n    },\n    [dispatch]\n  );\n\n  const responseSuccessGoogle = useCallback(\n    async (response) => {\n      try {\n        let customer = await logOrRegisterCustomer(response);\n        if (customer.message) {\n          dispatch(setErors(customer.message));\n        } else {\n          dispatch(setCustomer(customer));\n        }\n      } catch (error) {\n        dispatch(setErors(error.response));\n      }\n    },\n    [dispatch]\n  );\n\n  const responseErrorGoogle = useCallback(\n    async (response) => {\n      dispatch(setErors(response.message));\n    },\n    [dispatch]\n  );\n  const formik = useFormik({\n    initialValues: {\n      loginOrEmail: \"\",\n      password: \"\",\n    },\n    onSubmit: (values) => {\n      singIn(values);\n    },\n  });\n\nconst initialValues = {\n    email: '',\n    password: '',\n  } \nconst validationSchema = ValidationSchema;\n\n\nconst onSubmit = values => {\n    singIn(values);\n}\n\n  return (\n    <>\n    <Header />\n    <div>\n      {/* <h1>LOGIN</h1>\n      <div className=\"Form\">\n        <form onSubmit={formik.handleSubmit}>\n          <label htmlFor=\"loginOrEmail\">Email Address</label>\n          <input\n            id=\"email\"\n            name=\"loginOrEmail\"\n            type=\"email\"\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            value={formik.values.loginOrEmail}\n          />\n          {formik.touched.loginOrEmail && formik.errors.loginOrEmail ? (\n            <div>{formik.errors.loginOrEmail}</div>\n          ) : null}\n          <label htmlFor=\"password\">Password</label>\n          <input\n            id=\"password\"\n            name=\"password\"\n            type=\"password\"\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            value={formik.values.password}\n          />\n          {formik.touched.password && formik.errors.password ? (\n            <div>{formik.errors.password}</div>\n          ) : null}\n          <button type=\"submit\">Submit</button>\n        </form>\n      </div> */}\n      <LoginForm initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit}/>\n      <div>\n        <GoogleLogin\n          clientId={configData.REACT_APP_GOOGLE_CLIENT_ID}\n          buttonText=\"Login\"\n          onSuccess={responseSuccessGoogle}\n          onFailure={responseErrorGoogle}\n          cookiePolicy={\"single_host_origin\"}\n        />\n      </div>\n      <h2> Welcome back {customerName(store)}</h2>\n      <h2>{errorloginOrEmail(store)}</h2>\n    </div>\n    </>\n  );\n};\n\nexport default LoginPage;\n"]},"metadata":{},"sourceType":"module"}