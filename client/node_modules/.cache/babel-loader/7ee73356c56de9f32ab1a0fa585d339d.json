{"ast":null,"code":"var _jsxFileName = \"/home/tirion/Desktop/Final_project/client/src/pages/RegistrationPage/RegistrationPage.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback } from \"react\";\nimport { useFormik } from \"formik\";\nimport { useDispatch } from \"react-redux\";\nimport { setCustomer, removeCustomer } from \"../../store/customer/reducer\";\nimport { setErors, clearErrors } from \"../../store/errors/reducer\";\nimport { logOrRegisterCustomer, registerCustomer } from \"../../api/userApi\";\nimport { GoogleLogin } from \"react-google-login\";\nimport configData from \"../../config/config.json\";\nimport { ValidationSchema } from \"../../components/forms/components/validationSchema\";\nimport RegistrationForm from \"../../components/form/RegistrationForm\";\nimport Header from \"../../components/Header/Header\";\nimport form from \"../../components/form/form.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst RegistrationPage = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const singUp = useCallback(async value => {\n    try {\n      let newCustomer = await registerCustomer(value);\n\n      if (newCustomer.message) {\n        dispatch(setErors(newCustomer.message));\n      } else {\n        dispatch(setCustomer(newCustomer.data));\n        dispatch(clearErrors());\n      }\n    } catch (err) {\n      dispatch(setErors(err.response));\n    }\n  }, [dispatch]);\n  const responseSuccessGoogle = useCallback(async response => {\n    try {\n      let customer = await logOrRegisterCustomer(response);\n\n      if (customer.message) {\n        dispatch(setErors(customer.message));\n      } else {\n        dispatch(setCustomer(customer));\n      }\n    } catch (error) {\n      dispatch(setErors(error.response));\n    }\n  }, [dispatch]);\n  const responseErrorGoogle = useCallback(async response => {\n    dispatch(setErors(response.message));\n  }, [dispatch]);\n  const initialValues = {\n    firstName: \"\",\n    lastName: \"\",\n    login: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\"\n  };\n  const validationSchema = ValidationSchema;\n\n  const onSubmit = values => {\n    singUp(values);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form__wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Registration form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(RegistrationForm, {\n        initialValues: initialValues,\n        validationSchema: validationSchema,\n        onSubmit: onSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(GoogleLogin, {\n        clientId: configData.REACT_APP_GOOGLE_CLIENT_ID,\n        buttonText: \"Login\",\n        onSuccess: responseSuccessGoogle,\n        onFailure: responseErrorGoogle,\n        cookiePolicy: \"single_host_origin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: () => {\n          dispatch(removeCustomer());\n        },\n        children: \"LOGOUT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(RegistrationPage, \"HLBsPHfA8qgkUcnz2dbD6mkh4qo=\", false, function () {\n  return [useDispatch];\n});\n\n_c = RegistrationPage;\nexport default RegistrationPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegistrationPage\");","map":{"version":3,"sources":["/home/tirion/Desktop/Final_project/client/src/pages/RegistrationPage/RegistrationPage.jsx"],"names":["React","useCallback","useFormik","useDispatch","setCustomer","removeCustomer","setErors","clearErrors","logOrRegisterCustomer","registerCustomer","GoogleLogin","configData","ValidationSchema","RegistrationForm","Header","form","RegistrationPage","dispatch","singUp","value","newCustomer","message","data","err","response","responseSuccessGoogle","customer","error","responseErrorGoogle","initialValues","firstName","lastName","login","email","password","confirmPassword","validationSchema","onSubmit","values","REACT_APP_GOOGLE_CLIENT_ID"],"mappings":"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","sourcesContent":["import React, { useCallback } from \"react\";\nimport { useFormik } from \"formik\";\nimport { useDispatch } from \"react-redux\";\nimport { setCustomer, removeCustomer } from \"../../store/customer/reducer\";\nimport { setErors, clearErrors } from \"../../store/errors/reducer\";\nimport { logOrRegisterCustomer, registerCustomer } from \"../../api/userApi\";\nimport { GoogleLogin } from \"react-google-login\";\nimport configData from \"../../config/config.json\";\nimport { ValidationSchema } from \"../../components/forms/components/validationSchema\";\nimport RegistrationForm from \"../../components/form/RegistrationForm\";\nimport Header from \"../../components/Header/Header\"\nimport form from \"../../components/form/form.scss\"\n\nconst RegistrationPage = () => {\n  const dispatch = useDispatch();\n\n  const singUp = useCallback(\n    async (value) => {\n      try {\n        let newCustomer = await registerCustomer(value);\n        if (newCustomer.message) {\n          dispatch(setErors(newCustomer.message));\n        } else {\n          dispatch(setCustomer(newCustomer.data));\n          dispatch(clearErrors());\n        }\n      } catch (err) {\n        dispatch(setErors(err.response));\n      }\n    },\n    [dispatch]\n  );\n\n  const responseSuccessGoogle = useCallback(\n    async (response) => {\n      try {\n        let customer = await logOrRegisterCustomer(response);\n        if (customer.message) {\n          dispatch(setErors(customer.message));\n        } else {\n          dispatch(setCustomer(customer));\n        }\n      } catch (error) {\n        dispatch(setErors(error.response));\n      }\n    },\n    [dispatch]\n  );\n  const responseErrorGoogle = useCallback(\n    async (response) => {\n      dispatch(setErors(response.message));\n    },\n    [dispatch]\n  );\n\nconst initialValues = {\n    firstName: \"\",\n    lastName: \"\",\n    login: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\"\n  } \nconst validationSchema = ValidationSchema;\n\n\nconst onSubmit = values => {\n    singUp(values);\n}\n\n  return (\n      <>\n      <Header />\n      {/* <h1> REGISTRATION</h1>\n      <div className=\"Form\">\n        <form onSubmit={formik.handleSubmit}>\n          <label htmlFor=\"firstName\">First Name</label>\n          <input\n            id=\"firstName\"\n            name=\"firstName\"\n            type=\"text\"\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            value={formik.values.firstName}\n          />\n          {formik.touched.firstName && formik.errors.firstName ? (\n            <div>{formik.errors.firstName}</div>\n          ) : null}\n\n          <label htmlFor=\"lastName\">Last Name</label>\n          <input\n            id=\"lastName\"\n            name=\"lastName\"\n            type=\"text\"\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            value={formik.values.lastName}\n          />\n          {formik.touched.lastName && formik.errors.lastName ? (\n            <div>{formik.errors.lastName}</div>\n          ) : null}\n          <label htmlFor=\"login\">WHAT to call you?</label>\n          <input\n            id=\"login\"\n            name=\"login\"\n            type=\"text\"\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            value={formik.values.login}\n          />\n          {formik.touched.login && formik.errors.login ? (\n            <div>{formik.errors.login}</div>\n          ) : null}\n\n          <label htmlFor=\"email\">Email Address</label>\n          <input\n            id=\"email\"\n            name=\"email\"\n            type=\"email\"\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            value={formik.values.email}\n          />\n          {formik.touched.email && formik.errors.email ? (\n            <div>{formik.errors.email}</div>\n          ) : null}\n          <label htmlFor=\"password\">Password</label>\n          <input\n            id=\"password\"\n            name=\"password\"\n            type=\"password\"\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            value={formik.values.password}\n          />\n          {formik.touched.password && formik.errors.password ? (\n            <div>{formik.errors.password}</div>\n          ) : null}\n          <button type=\"submit\">Submit</button>\n        </form>\n      </div> */}\n      <div className=\"form__wrapper\">\n      <h1>Registration form</h1>\n      <RegistrationForm initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit}/>\n      <GoogleLogin\n        clientId={configData.REACT_APP_GOOGLE_CLIENT_ID}\n        buttonText=\"Login\"\n        onSuccess={responseSuccessGoogle}\n        onFailure={responseErrorGoogle}\n        cookiePolicy={\"single_host_origin\"}\n      />\n\n      <button\n        type=\"button\"\n        onClick={() => {\n          dispatch(removeCustomer());\n        }}\n      >\n        LOGOUT\n      </button>\n    </div>\n    </>\n  );\n};\n\nexport default RegistrationPage;\n"]},"metadata":{},"sourceType":"module"}