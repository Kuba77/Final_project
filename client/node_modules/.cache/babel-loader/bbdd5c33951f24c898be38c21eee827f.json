{"ast":null,"code":"var _jsxFileName = \"/home/tirion/Desktop/Final_project/client/src/components/form/SighnUpForm.jsx\",\n    _s = $RefreshSig$();\n\n// import React from 'react'\n// import { Formik, Form, Field, ErrorMessage, FieldArray, FastField} from 'formik';\n// import * as Yup from 'yup'\n// import TextError from './TextError';\n// const initialValues = {\n//     name: '',\n//     email: '',\n//     channel: '',\n//     comments: '',\n//     address: '',\n//     social: {\n//         facebook: '',\n//         twitter: ''\n//     },\n//     phoneNumbers: ['', ''],\n//     phNumbers: ['']\n// };\n// const onSubmit = values => {\n//     console.log('Form data', values)\n// };\n// const validationSchema = Yup.object({\n//     name: Yup.string().required('Required!'),\n//     email: Yup.string().email('Invalid email format').required('Required'),\n//     channel: Yup.string().required('Required')\n// })\n//  function SighnUpForm() {\n//     // console.log('Visited fields', formik.touched)\n//     return(\n//         <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit}>\n//         <div className=\"form__wrapper\">\n//                         <Form>\n//                         <div className=\"form__control\">\n//                         <label htmlFor=\"name\">Name</label>\n//                         <Field type=\"text\" id=\"name\" name=\"name\" />\n//                         <ErrorMessage name=\"name\" component={TextError}/>\n//                         </div>\n//                         <div className=\"form__control\">\n//                         <label htmlFor=\"email\">E-mail</label>\n//                         <Field type=\"email\" id=\"email\" name=\"email\" />\n//                         <ErrorMessage name=\"email\">\n//                             {\n//                                 (errorMsg) => <div className=\"error\">{errorMsg}</div>\n//                             }\n//                         </ErrorMessage>\n//                         </div>\n//                         <div className=\"form__control\">\n//                         <label htmlFor=\"channel\">Channel</label>\n//                         <Field type=\"text\" id=\"channel\" name=\"channel\" />\n//                         <ErrorMessage name=\"channel\" />\n//                         </div>\n//                         <div className=\"form__control\">\n//                         <label htmlFor=\"comments\">Comments</label>\n//                         <Field as=\"textarea\" id=\"comments\" name=\"comments\" />\n//                         </div>\n//                         <div className=\"form__control\">\n//                         <label htmlFor=\"address\">Address</label>\n//                         <FastField name=\"address\">\n//                             {(props) => {\n//                                     console.log('Field render')\n//                                     const {field, form, meta} = props\n//                                     // console.log('Render props', props)\n//                                     return(\n//                                         <div>\n//                                         <input type=\"text\" id=\"address\" {...field}/>\n//                                         {meta.touched && meta.error ? <div>{meta.error}</div> : null}\n//                                         </div>\n//                                     )\n//                                 }\n//                             }\n//                         </FastField>\n//                         </div>\n//                         <div className=\"form__control\">\n//                         <label htmlFor=\"facebook\">Facebook profile</label>\n//                         <Field type=\"text\" id=\"facebook\" name=\"social.facebook\" />\n//                         </div>\n//                         <div className=\"form__control\">\n//                         <label htmlFor=\"twitter\">Twitter profile</label>\n//                         <Field type=\"text\" id=\"twitter\" name=\"social.twitter\" />\n//                         </div>\n//                         <div className=\"form__control\">\n//                         <label htmlFor=\"primaryPh\">Primary phone number</label>\n//                         <Field type=\"text\" id=\"primaryPh\" name=\"phoneNumbers[0]\" />\n//                         </div>\n//                         <div className=\"form__control\">\n//                         <label htmlFor=\"secondaryPh\">Secondary phone number</label>\n//                         <Field type=\"text\" id=\"secondaryPh\" name=\"phoneNumbers[1]\" />\n//                         </div>\n//                         <div className=\"form__control\">\n//                         <label>List of phone numbers</label>\n//                         <FieldArray name=\"phNumbers\">\n//                             {\n//                                 (fieldArrayProps) => {\n//                                 // console.log('fieldArrayProps', fieldArrayProps)\n//                                 const {push, remove, form} = fieldArrayProps\n//                                 const {values} = form\n//                                 const {phNumbers} = values\n//                                 return <div>\n//                                     {\n//                                         phNumbers.map((phNumber, index) => (\n//                                            <div key={index}>\n//                                                <Field name={`phNumbers[${index}]`}/>\n//                                                {\n//                                                    index > 0 &&\n//                                                    <button type=\"button\" onClick={() => remove(index)}> - </button>\n//                                                }\n//                                                <button type=\"button\" onClick={() => push('')}> + </button>\n//                                            </div> \n//                                         ))\n//                                     }\n//                                 </div>\n//                                 }\n//                             }\n//                         </FieldArray>\n//                         </div>\n//                         <button type=\"submit\" className=\"form__btn\">Submit</button>\n//                     </Form>\n//         </div>\n//         </Formik>\n// )\n// }\n// export default SighnUpForm\nimport React, { useState } from 'react';\nimport { Formik, Form, Field, ErrorMessage, FieldArray, FastField } from 'formik';\nimport * as Yup from 'yup';\nimport TextError from './TextError';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialValues = {\n  name: 'Vishwas',\n  email: '',\n  channel: '',\n  comments: '',\n  address: '',\n  social: {\n    facebook: '',\n    twitter: ''\n  },\n  phoneNumbers: ['', ''],\n  phNumbers: ['']\n};\nconst savedValues = {\n  name: 'Vishwas',\n  email: 'v@example.com',\n  channel: 'codevolution',\n  comments: 'Welcome to Formik',\n  address: '221B Baker Street',\n  social: {\n    facebook: '',\n    twitter: ''\n  },\n  phoneNumbers: ['', ''],\n  phNumbers: ['']\n};\n\nconst onSubmit = (values, submitProps) => {\n  console.log('Form data', values);\n  console.log('submitProps', submitProps);\n  submitProps.setSubmitting(false);\n  submitProps.resetForm();\n};\n\nconst validationSchema = Yup.object({\n  name: Yup.string().required('Required'),\n  email: Yup.string().email('Invalid email format').required('Required'),\n  channel: Yup.string().required('Required'),\n  comments: Yup.string().required('Required')\n});\n\nconst validateComments = value => {\n  let error;\n\n  if (!value) {\n    error = 'Required';\n  }\n\n  return error;\n};\n\nfunction SighnUpForm() {\n  _s();\n\n  const [formValues, setFormValues] = useState(null);\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: formValues || initialValues,\n    validationSchema: validationSchema,\n    onSubmit: onSubmit,\n    enableReinitialize: true // validateOnChange={false}\n    // validateOnBlur={false}\n    // validateOnMount\n    ,\n    children: formik => {\n      console.log('Formik props', formik);\n      return /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"name\",\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            type: \"text\",\n            id: \"name\",\n            name: \"name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n            name: \"name\",\n            component: TextError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"email\",\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            type: \"email\",\n            id: \"email\",\n            name: \"email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n            name: \"email\",\n            children: error => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"error\",\n              children: error\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 27\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"channel\",\n            children: \"Channel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            type: \"text\",\n            id: \"channel\",\n            name: \"channel\",\n            placeholder: \"YouTube channel name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n            name: \"channel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"comments\",\n            children: \"Comments\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            as: \"textarea\",\n            id: \"comments\",\n            name: \"comments\",\n            validate: validateComments\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n            name: \"comments\",\n            component: TextError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"address\",\n            children: \"Address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(FastField, {\n            name: \"address\",\n            children: _ref => {\n              let {\n                field,\n                form,\n                meta\n              } = _ref;\n              // console.log('Field render')\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  ...field\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 271,\n                  columnNumber: 23\n                }, this), meta.touched && meta.error ? /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: meta.error\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 273,\n                  columnNumber: 25\n                }, this) : null]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 21\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"facebook\",\n            children: \"Facebook profile\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            type: \"text\",\n            id: \"facebook\",\n            name: \"social.facebook\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"twitter\",\n            children: \"Twitter profile\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            type: \"text\",\n            id: \"twitter\",\n            name: \"social.twitter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"primaryPh\",\n            children: \"Primary phone number\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            type: \"text\",\n            id: \"primaryPh\",\n            name: \"phoneNumbers[0]\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"secondaryPh\",\n            children: \"Secondary phone number\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            type: \"text\",\n            id: \"secondaryPh\",\n            name: \"phoneNumbers[1]\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"List of phone numbers\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(FieldArray, {\n            name: \"phNumbers\",\n            children: fieldArrayProps => {\n              const {\n                push,\n                remove,\n                form\n              } = fieldArrayProps;\n              const {\n                values\n              } = form;\n              const {\n                phNumbers\n              } = values; // console.log('fieldArrayProps', fieldArrayProps)\n              // console.log('Form errors', form.errors)\n\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [phNumbers.map((phNumber, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(Field, {\n                    name: `phNumbers[${index}]`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 314,\n                    columnNumber: 27\n                  }, this), index > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    onClick: () => remove(index),\n                    children: \"-\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 316,\n                    columnNumber: 29\n                  }, this)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 313,\n                  columnNumber: 25\n                }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"button\",\n                  onClick: () => push(''),\n                  children: \"+\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 322,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 311,\n                columnNumber: 21\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"form__btn\",\n          type: \"button\",\n          onClick: () => setFormValues(savedValues),\n          children: \"Load saved data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"reset\",\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"form__btn\",\n          type: \"submit\",\n          disabled: !formik.isValid || formik.isSubmitting,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 11\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SighnUpForm, \"JoIKYciigPkzlQ4H+7xMLcHpEtw=\");\n\n_c = SighnUpForm;\nexport default SighnUpForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"SighnUpForm\");","map":{"version":3,"sources":["/home/tirion/Desktop/Final_project/client/src/components/form/SighnUpForm.jsx"],"names":["React","useState","Formik","Form","Field","ErrorMessage","FieldArray","FastField","Yup","TextError","initialValues","name","email","channel","comments","address","social","facebook","twitter","phoneNumbers","phNumbers","savedValues","onSubmit","values","submitProps","console","log","setSubmitting","resetForm","validationSchema","object","string","required","validateComments","value","error","SighnUpForm","formValues","setFormValues","formik","field","form","meta","touched","fieldArrayProps","push","remove","map","phNumber","index","isValid","isSubmitting"],"mappings":";;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SACEC,MADF,EAEEC,IAFF,EAGEC,KAHF,EAIEC,YAJF,EAKEC,UALF,EAMEC,SANF,QAOO,QAPP;AAQA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,IAAI,EAAE,SADc;AAEpBC,EAAAA,KAAK,EAAE,EAFa;AAGpBC,EAAAA,OAAO,EAAE,EAHW;AAIpBC,EAAAA,QAAQ,EAAE,EAJU;AAKpBC,EAAAA,OAAO,EAAE,EALW;AAMpBC,EAAAA,MAAM,EAAE;AACNC,IAAAA,QAAQ,EAAE,EADJ;AAENC,IAAAA,OAAO,EAAE;AAFH,GANY;AAUpBC,EAAAA,YAAY,EAAE,CAAC,EAAD,EAAK,EAAL,CAVM;AAWpBC,EAAAA,SAAS,EAAE,CAAC,EAAD;AAXS,CAAtB;AAcA,MAAMC,WAAW,GAAG;AAClBV,EAAAA,IAAI,EAAE,SADY;AAElBC,EAAAA,KAAK,EAAE,eAFW;AAGlBC,EAAAA,OAAO,EAAE,cAHS;AAIlBC,EAAAA,QAAQ,EAAE,mBAJQ;AAKlBC,EAAAA,OAAO,EAAE,mBALS;AAMlBC,EAAAA,MAAM,EAAE;AACNC,IAAAA,QAAQ,EAAE,EADJ;AAENC,IAAAA,OAAO,EAAE;AAFH,GANU;AAUlBC,EAAAA,YAAY,EAAE,CAAC,EAAD,EAAK,EAAL,CAVI;AAWlBC,EAAAA,SAAS,EAAE,CAAC,EAAD;AAXO,CAApB;;AAcA,MAAME,QAAQ,GAAG,CAACC,MAAD,EAASC,WAAT,KAAyB;AACxCC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBH,MAAzB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,WAA3B;AACAA,EAAAA,WAAW,CAACG,aAAZ,CAA0B,KAA1B;AACAH,EAAAA,WAAW,CAACI,SAAZ;AACD,CALD;;AAOA,MAAMC,gBAAgB,GAAGrB,GAAG,CAACsB,MAAJ,CAAW;AAClCnB,EAAAA,IAAI,EAAEH,GAAG,CAACuB,MAAJ,GAAaC,QAAb,CAAsB,UAAtB,CAD4B;AAElCpB,EAAAA,KAAK,EAAEJ,GAAG,CAACuB,MAAJ,GACJnB,KADI,CACE,sBADF,EAEJoB,QAFI,CAEK,UAFL,CAF2B;AAKlCnB,EAAAA,OAAO,EAAEL,GAAG,CAACuB,MAAJ,GAAaC,QAAb,CAAsB,UAAtB,CALyB;AAMlClB,EAAAA,QAAQ,EAAEN,GAAG,CAACuB,MAAJ,GAAaC,QAAb,CAAsB,UAAtB;AANwB,CAAX,CAAzB;;AASA,MAAMC,gBAAgB,GAAGC,KAAK,IAAI;AAChC,MAAIC,KAAJ;;AACA,MAAI,CAACD,KAAL,EAAY;AACVC,IAAAA,KAAK,GAAG,UAAR;AACD;;AACD,SAAOA,KAAP;AACD,CAND;;AAQA,SAASC,WAAT,GAAwB;AAAA;;AACtB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BrC,QAAQ,CAAC,IAAD,CAA5C;AACA,sBACE,QAAC,MAAD;AACE,IAAA,aAAa,EAAEoC,UAAU,IAAI3B,aAD/B;AAEE,IAAA,gBAAgB,EAAEmB,gBAFpB;AAGE,IAAA,QAAQ,EAAEP,QAHZ;AAIE,IAAA,kBAAkB,MAJpB,CAKE;AACA;AACA;AAPF;AAAA,cASGiB,MAAM,IAAI;AACTd,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4Ba,MAA5B;AACA,0BACE,QAAC,IAAD;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,cAAf;AAAA,kCACE;AAAO,YAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,KAAD;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,EAAE,EAAC,MAAtB;AAA6B,YAAA,IAAI,EAAC;AAAlC;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE,QAAC,YAAD;AAAc,YAAA,IAAI,EAAC,MAAnB;AAA0B,YAAA,SAAS,EAAE9B;AAArC;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAOE;AAAK,UAAA,SAAS,EAAC,cAAf;AAAA,kCACE;AAAO,YAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,KAAD;AAAO,YAAA,IAAI,EAAC,OAAZ;AAAoB,YAAA,EAAE,EAAC,OAAvB;AAA+B,YAAA,IAAI,EAAC;AAApC;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE,QAAC,YAAD;AAAc,YAAA,IAAI,EAAC,OAAnB;AAAA,sBACG0B,KAAK,iBAAI;AAAK,cAAA,SAAS,EAAC,OAAf;AAAA,wBAAwBA;AAAxB;AAAA;AAAA;AAAA;AAAA;AADZ;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPF,eAeE;AAAK,UAAA,SAAS,EAAC,cAAf;AAAA,kCACE;AAAO,YAAA,OAAO,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,KAAD;AACE,YAAA,IAAI,EAAC,MADP;AAEE,YAAA,EAAE,EAAC,SAFL;AAGE,YAAA,IAAI,EAAC,SAHP;AAIE,YAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,kBAFF,eAQE,QAAC,YAAD;AAAc,YAAA,IAAI,EAAC;AAAnB;AAAA;AAAA;AAAA;AAAA,kBARF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAfF,eA0BE;AAAK,UAAA,SAAS,EAAC,cAAf;AAAA,kCACE;AAAO,YAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,KAAD;AACE,YAAA,EAAE,EAAC,UADL;AAEE,YAAA,EAAE,EAAC,UAFL;AAGE,YAAA,IAAI,EAAC,UAHP;AAIE,YAAA,QAAQ,EAAEF;AAJZ;AAAA;AAAA;AAAA;AAAA,kBAFF,eAQE,QAAC,YAAD;AAAc,YAAA,IAAI,EAAC,UAAnB;AAA8B,YAAA,SAAS,EAAExB;AAAzC;AAAA;AAAA;AAAA;AAAA,kBARF;AAAA;AAAA;AAAA;AAAA;AAAA,gBA1BF,eAqCE;AAAK,UAAA,SAAS,EAAC,cAAf;AAAA,kCACE;AAAO,YAAA,OAAO,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,SAAD;AAAW,YAAA,IAAI,EAAC,SAAhB;AAAA,sBACG,QAA2B;AAAA,kBAA1B;AAAE+B,gBAAAA,KAAF;AAASC,gBAAAA,IAAT;AAAeC,gBAAAA;AAAf,eAA0B;AAC1B;AACA,kCACE;AAAA,wCACE;AAAO,kBAAA,IAAI,EAAC,MAAZ;AAAA,qBAAuBF;AAAvB;AAAA;AAAA;AAAA;AAAA,wBADF,EAEGE,IAAI,CAACC,OAAL,IAAgBD,IAAI,CAACP,KAArB,gBACC;AAAA,4BAAMO,IAAI,CAACP;AAAX;AAAA;AAAA;AAAA;AAAA,wBADD,GAEG,IAJN;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF;AAQD;AAXH;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBArCF,eAsDE;AAAK,UAAA,SAAS,EAAC,cAAf;AAAA,kCACE;AAAO,YAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,KAAD;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,EAAE,EAAC,UAAtB;AAAiC,YAAA,IAAI,EAAC;AAAtC;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAtDF,eA2DE;AAAK,UAAA,SAAS,EAAC,cAAf;AAAA,kCACE;AAAO,YAAA,OAAO,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,KAAD;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,EAAE,EAAC,SAAtB;AAAgC,YAAA,IAAI,EAAC;AAArC;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBA3DF,eAgEE;AAAK,UAAA,SAAS,EAAC,cAAf;AAAA,kCACE;AAAO,YAAA,OAAO,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,KAAD;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,EAAE,EAAC,WAAtB;AAAkC,YAAA,IAAI,EAAC;AAAvC;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAhEF,eAqEE;AAAK,UAAA,SAAS,EAAC,cAAf;AAAA,kCACE;AAAO,YAAA,OAAO,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,KAAD;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,EAAE,EAAC,aAAtB;AAAoC,YAAA,IAAI,EAAC;AAAzC;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBArEF,eA0EE;AAAK,UAAA,SAAS,EAAC,cAAf;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,UAAD;AAAY,YAAA,IAAI,EAAC,WAAjB;AAAA,sBACGS,eAAe,IAAI;AAClB,oBAAM;AAAEC,gBAAAA,IAAF;AAAQC,gBAAAA,MAAR;AAAgBL,gBAAAA;AAAhB,kBAAyBG,eAA/B;AACA,oBAAM;AAAErB,gBAAAA;AAAF,kBAAakB,IAAnB;AACA,oBAAM;AAAErB,gBAAAA;AAAF,kBAAgBG,MAAtB,CAHkB,CAIlB;AACA;;AACA,kCACE;AAAA,2BACGH,SAAS,CAAC2B,GAAV,CAAc,CAACC,QAAD,EAAWC,KAAX,kBACb;AAAA,0CACE,QAAC,KAAD;AAAO,oBAAA,IAAI,EAAG,aAAYA,KAAM;AAAhC;AAAA;AAAA;AAAA;AAAA,0BADF,EAEGA,KAAK,GAAG,CAAR,iBACC;AAAQ,oBAAA,IAAI,EAAC,QAAb;AAAsB,oBAAA,OAAO,EAAE,MAAMH,MAAM,CAACG,KAAD,CAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAHJ;AAAA,mBAAUA,KAAV;AAAA;AAAA;AAAA;AAAA,wBADD,CADH,eAWE;AAAQ,kBAAA,IAAI,EAAC,QAAb;AAAsB,kBAAA,OAAO,EAAE,MAAMJ,IAAI,CAAC,EAAD,CAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAXF;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF;AAiBD;AAxBH;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBA1EF,eAmIE;AAAS,UAAA,SAAS,EAAC,WAAnB;AAA+B,UAAA,IAAI,EAAC,QAApC;AAA6C,UAAA,OAAO,EAAE,MAAMP,aAAa,CAACjB,WAAD,CAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAnIF,eAsIE;AAAQ,UAAA,IAAI,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAtIF,eAuIE;AACA,UAAA,SAAS,EAAC,WADV;AAEE,UAAA,IAAI,EAAC,QAFP;AAGE,UAAA,QAAQ,EAAE,CAACkB,MAAM,CAACW,OAAR,IAAmBX,MAAM,CAACY,YAHtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAvIF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAiJD;AA5JH;AAAA;AAAA;AAAA;AAAA,UADF;AAgKD;;GAlKQf,W;;KAAAA,W;AAoKT,eAAeA,WAAf","sourcesContent":["// import React from 'react'\n// import { Formik, Form, Field, ErrorMessage, FieldArray, FastField} from 'formik';\n// import * as Yup from 'yup'\n// import TextError from './TextError';\n\n// const initialValues = {\n//     name: '',\n//     email: '',\n//     channel: '',\n//     comments: '',\n//     address: '',\n//     social: {\n//         facebook: '',\n//         twitter: ''\n//     },\n//     phoneNumbers: ['', ''],\n//     phNumbers: ['']\n// };\n\n// const onSubmit = values => {\n//     console.log('Form data', values)\n// };\n\n\n// const validationSchema = Yup.object({\n//     name: Yup.string().required('Required!'),\n//     email: Yup.string().email('Invalid email format').required('Required'),\n//     channel: Yup.string().required('Required')\n// })\n\n\n//  function SighnUpForm() {\n\n//     // console.log('Visited fields', formik.touched)\n\n//     return(\n//         <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit}>\n//         <div className=\"form__wrapper\">\n\n//                         <Form>\n//                         <div className=\"form__control\">\n//                         <label htmlFor=\"name\">Name</label>\n//                         <Field type=\"text\" id=\"name\" name=\"name\" />\n//                         <ErrorMessage name=\"name\" component={TextError}/>\n//                         </div>\n        \n//                         <div className=\"form__control\">\n//                         <label htmlFor=\"email\">E-mail</label>\n//                         <Field type=\"email\" id=\"email\" name=\"email\" />\n//                         <ErrorMessage name=\"email\">\n//                             {\n//                                 (errorMsg) => <div className=\"error\">{errorMsg}</div>\n//                             }\n//                         </ErrorMessage>\n//                         </div>\n        \n//                         <div className=\"form__control\">\n//                         <label htmlFor=\"channel\">Channel</label>\n//                         <Field type=\"text\" id=\"channel\" name=\"channel\" />\n//                         <ErrorMessage name=\"channel\" />\n//                         </div>\n        \n//                         <div className=\"form__control\">\n//                         <label htmlFor=\"comments\">Comments</label>\n//                         <Field as=\"textarea\" id=\"comments\" name=\"comments\" />\n//                         </div>\n        \n//                         <div className=\"form__control\">\n//                         <label htmlFor=\"address\">Address</label>\n//                         <FastField name=\"address\">\n//                             {(props) => {\n//                                     console.log('Field render')\n//                                     const {field, form, meta} = props\n//                                     // console.log('Render props', props)\n//                                     return(\n//                                         <div>\n//                                         <input type=\"text\" id=\"address\" {...field}/>\n//                                         {meta.touched && meta.error ? <div>{meta.error}</div> : null}\n//                                         </div>\n//                                     )\n//                                 }\n//                             }\n//                         </FastField>\n//                         </div>\n        \n        \n//                         <div className=\"form__control\">\n//                         <label htmlFor=\"facebook\">Facebook profile</label>\n//                         <Field type=\"text\" id=\"facebook\" name=\"social.facebook\" />\n//                         </div>\n        \n//                         <div className=\"form__control\">\n//                         <label htmlFor=\"twitter\">Twitter profile</label>\n//                         <Field type=\"text\" id=\"twitter\" name=\"social.twitter\" />\n//                         </div>\n        \n        \n//                         <div className=\"form__control\">\n//                         <label htmlFor=\"primaryPh\">Primary phone number</label>\n//                         <Field type=\"text\" id=\"primaryPh\" name=\"phoneNumbers[0]\" />\n//                         </div>\n        \n//                         <div className=\"form__control\">\n//                         <label htmlFor=\"secondaryPh\">Secondary phone number</label>\n//                         <Field type=\"text\" id=\"secondaryPh\" name=\"phoneNumbers[1]\" />\n//                         </div>\n                        \n        \n//                         <div className=\"form__control\">\n//                         <label>List of phone numbers</label>\n//                         <FieldArray name=\"phNumbers\">\n//                             {\n//                                 (fieldArrayProps) => {\n//                                 // console.log('fieldArrayProps', fieldArrayProps)\n//                                 const {push, remove, form} = fieldArrayProps\n//                                 const {values} = form\n//                                 const {phNumbers} = values\n//                                 return <div>\n//                                     {\n//                                         phNumbers.map((phNumber, index) => (\n//                                            <div key={index}>\n//                                                <Field name={`phNumbers[${index}]`}/>\n//                                                {\n//                                                    index > 0 &&\n//                                                    <button type=\"button\" onClick={() => remove(index)}> - </button>\n//                                                }\n                                               \n//                                                <button type=\"button\" onClick={() => push('')}> + </button>\n//                                            </div> \n//                                         ))\n//                                     }\n//                                 </div>\n//                                 }\n//                             }\n//                         </FieldArray>\n//                         </div>\n\n//                         <button type=\"submit\" className=\"form__btn\">Submit</button>\n//                     </Form>\n//         </div>\n//         </Formik>\n// )\n    \n// }\n\n// export default SighnUpForm\n\nimport React, { useState } from 'react'\nimport {\n  Formik,\n  Form,\n  Field,\n  ErrorMessage,\n  FieldArray,\n  FastField\n} from 'formik'\nimport * as Yup from 'yup'\nimport TextError from './TextError'\n\nconst initialValues = {\n  name: 'Vishwas',\n  email: '',\n  channel: '',\n  comments: '',\n  address: '',\n  social: {\n    facebook: '',\n    twitter: ''\n  },\n  phoneNumbers: ['', ''],\n  phNumbers: ['']\n}\n\nconst savedValues = {\n  name: 'Vishwas',\n  email: 'v@example.com',\n  channel: 'codevolution',\n  comments: 'Welcome to Formik',\n  address: '221B Baker Street',\n  social: {\n    facebook: '',\n    twitter: ''\n  },\n  phoneNumbers: ['', ''],\n  phNumbers: ['']\n}\n\nconst onSubmit = (values, submitProps) => {\n  console.log('Form data', values)\n  console.log('submitProps', submitProps)\n  submitProps.setSubmitting(false)\n  submitProps.resetForm()\n}\n\nconst validationSchema = Yup.object({\n  name: Yup.string().required('Required'),\n  email: Yup.string()\n    .email('Invalid email format')\n    .required('Required'),\n  channel: Yup.string().required('Required'),\n  comments: Yup.string().required('Required')\n})\n\nconst validateComments = value => {\n  let error\n  if (!value) {\n    error = 'Required'\n  }\n  return error\n}\n\nfunction SighnUpForm () {\n  const [formValues, setFormValues] = useState(null)\n  return (\n    <Formik\n      initialValues={formValues || initialValues}\n      validationSchema={validationSchema}\n      onSubmit={onSubmit}\n      enableReinitialize\n      // validateOnChange={false}\n      // validateOnBlur={false}\n      // validateOnMount\n    >\n      {formik => {\n        console.log('Formik props', formik)\n        return (\n          <Form>\n            <div className='form-control'>\n              <label htmlFor='name'>Name</label>\n              <Field type='text' id='name' name='name' />\n              <ErrorMessage name='name' component={TextError} />\n            </div>\n\n            <div className='form-control'>\n              <label htmlFor='email'>Email</label>\n              <Field type='email' id='email' name='email' />\n              <ErrorMessage name='email'>\n                {error => <div className='error'>{error}</div>}\n              </ErrorMessage>\n            </div>\n\n            <div className='form-control'>\n              <label htmlFor='channel'>Channel</label>\n              <Field\n                type='text'\n                id='channel'\n                name='channel'\n                placeholder='YouTube channel name'\n              />\n              <ErrorMessage name='channel' />\n            </div>\n\n            <div className='form-control'>\n              <label htmlFor='comments'>Comments</label>\n              <Field\n                as='textarea'\n                id='comments'\n                name='comments'\n                validate={validateComments}\n              />\n              <ErrorMessage name='comments' component={TextError} />\n            </div>\n\n            <div className='form-control'>\n              <label htmlFor='address'>Address</label>\n              <FastField name='address'>\n                {({ field, form, meta }) => {\n                  // console.log('Field render')\n                  return (\n                    <div>\n                      <input type='text' {...field} />\n                      {meta.touched && meta.error ? (\n                        <div>{meta.error}</div>\n                      ) : null}\n                    </div>\n                  )\n                }}\n              </FastField>\n            </div>\n\n            <div className='form-control'>\n              <label htmlFor='facebook'>Facebook profile</label>\n              <Field type='text' id='facebook' name='social.facebook' />\n            </div>\n\n            <div className='form-control'>\n              <label htmlFor='twitter'>Twitter profile</label>\n              <Field type='text' id='twitter' name='social.twitter' />\n            </div>\n\n            <div className='form-control'>\n              <label htmlFor='primaryPh'>Primary phone number</label>\n              <Field type='text' id='primaryPh' name='phoneNumbers[0]' />\n            </div>\n\n            <div className='form-control'>\n              <label htmlFor='secondaryPh'>Secondary phone number</label>\n              <Field type='text' id='secondaryPh' name='phoneNumbers[1]' />\n            </div>\n\n            <div className='form-control'>\n              <label>List of phone numbers</label>\n              <FieldArray name='phNumbers'>\n                {fieldArrayProps => {\n                  const { push, remove, form } = fieldArrayProps\n                  const { values } = form\n                  const { phNumbers } = values\n                  // console.log('fieldArrayProps', fieldArrayProps)\n                  // console.log('Form errors', form.errors)\n                  return (\n                    <div>\n                      {phNumbers.map((phNumber, index) => (\n                        <div key={index}>\n                          <Field name={`phNumbers[${index}]`} />\n                          {index > 0 && (\n                            <button type='button' onClick={() => remove(index)}>\n                              -\n                            </button>\n                          )}\n                        </div>\n                      ))}\n                      <button type='button' onClick={() => push('')}>\n                        +\n                      </button>\n                    </div>\n                  )\n                }}\n              </FieldArray>\n            </div>\n            {/* <button\n              type='button'\n              onClick={() => formik.validateField('comments')}\n            >\n              Validate comments\n            </button>\n            <button\n              type='button'\n              onClick={() => formik.setFieldTouched('comments')}\n            >\n              Visit comments\n            </button>\n            <button type='button' onClick={() => formik.validateForm()}>\n              Validate all\n            </button>\n            <button\n              type='button'\n              onClick={() =>\n                formik.setTouched({\n                  name: true,\n                  email: true,\n                  channel: true,\n                  comments: true\n                })\n              }\n            >\n              Visit all\n            </button> */}\n            <button  className=\"form__btn\" type='button' onClick={() => setFormValues(savedValues)}>\n              Load saved data\n            </button>\n            <button type='reset'>Reset</button>\n            <button\n            className=\"form__btn\"\n              type='submit'\n              disabled={!formik.isValid || formik.isSubmitting}\n            >\n              Submit\n            </button>\n          </Form>\n        )\n      }}\n    </Formik>\n  )\n}\n\nexport default SighnUpForm\n"]},"metadata":{},"sourceType":"module"}